{"version":3,"sources":["../src/types/type-guards.ts","../src/cli/options.ts","../src/utils/logging.ts","../src/cli/create_cli.ts","../src/cli/info_command.ts","../src/cli/optimize_command.ts","../src/cli/show_help.ts","../src/io.ts"],"sourcesContent":["import { isObject, isString } from \"inferred-types\";\nimport { InputFormat } from \"./sharp-types\";\nimport { INPUT_FILE_EXT } from \"../constants\";\nimport { ImageCache } from \"./other-types\";\nimport { command_options } from \"src/cli/options\";\nimport { Command } from \"src/cli/cli-types\";\n\nexport const isInputFormat = (filepath: unknown): filepath is InputFormat => {\n  return (\n    isString(filepath) && INPUT_FILE_EXT.some((ext) => filepath.endsWith(ext))\n  );\n};\n\nexport const isImageCache = (val: unknown): val is ImageCache => {\n  return (\n    isObject(val) &&\n    \"lastUpdated\" in val &&\n    \"items\" in val &&\n    isObject(val.items)\n  );\n};\n\n/**\n * type guard which checks whether the passed in value is a known command to CLI\n */\nexport const isCommand = (val: unknown): val is Command => {\n  return isString(val) && Object.keys(command_options).includes(val as any);\n};\n","import chalk from \"chalk\";\nimport { Option } from \"./cli-types\";\n\n/** all commands receive their respective command as first param */\nconst CMD = { name: \"cmd\", type: String, defaultOption: true, multiple: false };\n\nexport const command_options = {\n  info: [\n    CMD,\n    {\n      name: \"filter\",\n      type: String,\n      alias: \"f\",\n      multiple: true,\n      typeLabel: chalk.underline(\"substr[]\"),\n      description: `only report on symbols which match filter string`,\n    },\n    {\n      name: \"clear\",\n      defaultValue: false,\n      type: Boolean,\n      description: `clear the cache and rebuild fully`,\n    },\n  ],\n  optimize: [CMD],\n} as const satisfies Record<string, Option[]>;\n\nexport const commands_union = Object.keys(command_options).join(\n  `${chalk.gray(\" | \")}`,\n);\n\n/**\n * options which are available to all commands\n */\nexport const global_options = [\n  {\n    name: \"quiet\",\n    alias: \"q\",\n    defaultValue: false,\n    type: Boolean,\n    description: `quiet stdout output to a minimum`,\n  },\n  {\n    name: \"verbose\",\n    type: Boolean,\n    alias: \"v\",\n    defaultValue: false,\n    description: `more verbose output when analyzing`,\n  },\n  {\n    name: \"help\",\n    alias: \"h\",\n    type: Boolean,\n    defaultValue: false,\n    description: `this help menu`,\n  },\n] as const satisfies Option[];\n\n/**\n * options which are available only when _no_ command is expressed\n */\nexport const only_global_options = [];\n\nexport const command_descriptions = {\n  info: `provides an overview of the various source patterns defined, how many source images there are, current state of cache, etc.`,\n  optimize: `runs the optimization over all images, leveraging the cache to avoid unnecessary work unless instructed to otherwise`,\n} as const satisfies Record<keyof typeof command_options, string>;\n","import { LogVerbosity } from \"../types/other-types\";\n\nlet verbosity: LogVerbosity = \"normal\";\n\nexport const setVerbosity = (v: LogVerbosity) => {\n  verbosity = v;\n};\n\nexport const log = (...things: unknown[]) => {\n  if (verbosity !== \"quiet\") {\n    console.log(...things);\n  }\n};\n/**\n * always log, even when user has specified `--quiet` flag\n */\nexport const shout = (...things: unknown[]) => {\n  console.log(...things);\n};\n\n/**\n * log _only_ when verbosity is set to high\n */\nexport const whisper = (...things: unknown[]) => {\n  if (verbosity === \"verbose\") {\n    console.log(...things);\n  }\n};\n","import commandLineArgs, { CommandLineOptions } from \"command-line-args\";\nimport { Command } from \"./cli-types\";\nimport { command_options, global_options } from \"./options\";\nimport { isCommand } from \"src/types/type-guards\";\n\n/**\n * used to define CLI variable as a numeric array\n */\nexport const NumericArray = (): number[] => [];\n\nexport type CliResponse =\n  | [Command, CommandLineOptions]\n  | [undefined, CommandLineOptions];\n\nexport const create_cli = (): CliResponse => {\n  const argv = process.argv[2]?.split(\" \") || [];\n  const cmd_candidate: string = argv[0] || \"not-command\";\n\n  return isCommand(cmd_candidate)\n    ? [\n        cmd_candidate,\n        commandLineArgs(\n          [...command_options[cmd_candidate], ...global_options],\n          { stopAtFirstUnknown: true },\n        ),\n      ]\n    : [\n        undefined,\n        commandLineArgs(global_options, { stopAtFirstUnknown: true }),\n      ];\n};\n","import { log } from \"src/utils\";\nimport { AsOption } from \"./cli-types\";\n\nexport const info_command = async (opt: AsOption<\"info\">) => {\n  log(\"info\");\n};\n","import { log } from \"src/utils\";\nimport { AsOption } from \"./cli-types\";\n\nexport const optimize_command = async (opt: AsOption<\"optimize\">) => {\n  log(\"optimize\");\n};\n","import commandLineUsage from \"command-line-usage\";\nimport { Command } from \"./cli-types\";\nimport { isCommand } from \"src/types\";\nimport chalk from \"chalk\";\nimport {\n  command_descriptions,\n  command_options,\n  commands_union,\n  global_options,\n} from \"./options\";\n\nexport const sections = (cmd?: string) => [\n  {\n    header: \"Image Opt\",\n    content: \"Prepare your source images for the web.\",\n  },\n  {\n    header: `Syntax`,\n    content: isCommand(cmd)\n      ? `${chalk.bold(\"io\")} ${cmd} ${chalk.dim(`[ ${chalk.italic(\"options\")} ]`)}\\n\\n${command_descriptions[cmd] || \"\"}`\n      : `${chalk.bold(\"io\")} [ ${chalk.dim(commands_union)} ] ${chalk.dim(`[ ${chalk.italic(\"options\")} ]`)}\n\n      Choose a command from those listed above and add ${chalk.bold(\"--help\")} for\n      more info.`,\n  },\n  isCommand(cmd)\n    ? {}\n    : {\n        header: \"Commands:\",\n        content: Object.keys(command_descriptions)\n          .map((k) => {\n            const desc = command_descriptions[\n              k as keyof typeof command_descriptions\n            ] as string;\n            return `${chalk.bold(k)}: ${chalk.dim(desc)}`;\n          })\n          .join(\"\\n\"),\n      },\n  {\n    header: isCommand(cmd) ? \"Options\" : \"Global Options\",\n    optionList: isCommand(cmd)\n      ? [\n          ...command_options[cmd].filter((i) => i.name !== \"cmd\"),\n          ...global_options,\n        ]\n      : global_options,\n  },\n];\n\nexport const show_help = (cmd?: Command | undefined) => {\n  const usage = commandLineUsage(sections(cmd));\n  console.log(usage);\n};\n","import { isCommand } from \"src/types\";\n\nimport { setVerbosity } from \"src/utils\";\nimport {\n  AsOption,\n  create_cli,\n  info_command,\n  optimize_command,\n  show_help,\n} from \"./cli\";\n\nconst [cmd, cli] = create_cli();\n\nif (!cmd) {\n  show_help();\n  if (cli.help) {\n    process.exit(0);\n  } else {\n    process.exit(1);\n  }\n} else {\n  if (cli.help) {\n    show_help(cmd);\n    process.exit(0);\n  } else {\n    if (isCommand(cmd)) {\n      const opt = cli as AsOption<null>;\n      setVerbosity(opt.quiet ? \"quiet\" : opt.verbose ? \"verbose\" : \"normal\");\n      switch (cmd) {\n        case \"info\":\n          await info_command(cli as AsOption<\"info\">);\n          break;\n        case \"optimize\":\n          await optimize_command(cli as AsOption<\"optimize\">);\n          break;\n      }\n    }\n  }\n}\n"],"mappings":"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","names":["chalk","cmd","chalk"]}